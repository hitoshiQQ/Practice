3. Реализация класса графа (дополнительное задание)
Что нужно сделать

У вас есть базовый интерфейс для представления ориентированного графа. Напишите две реализации интерфейса:
  ListGraph, хранящий граф в виде массива списков смежности;
    MatrixGraph, хранящий граф в виде матрицы смежности.

Реализуйте конструктор, принимающий IGraph. Такой конструктор должен скопировать переданный граф в создаваемый объект. Обратите внимание,
что иногда в одну реализацию графа копируется другая. Реализуйте все конструкторы копий и операторы присваивания, если это необходимо.

Советы и рекомендации
Во всех алгоритмах поиска вам потребуются рёбра для вершин. Для этого используйте std::unordered_set и его метод contains.

Пример кода: 
class IGraph {
public:
virtual ~IGraph() {}
IGraph() {};
IGraph(IGraph *_oth) {};
virtual void AddEdge(int from, int to) = 0; // Метод принимает вершины начала и конца ребра и добавляет ребро
virtual int VerticesCount() const = 0; // Метод должен считать текущее количество вершин
virtual void GetNextVertices(int vertex, std::vector<int> &vertices) const = 0; // Для конкретной вершины метод выводит в вектор «вершины» все вершины, в которые можно дойти по ребру из данной
virtual void GetPrevVertices(int vertex, std::vector<int> &vertices) const = 0; // Для конкретной вершины метод выводит в вектор «вершины» все вершины, из которых можно дойти по ребру в данную
};

Чек-лист для проверки задания
Реализованы два класса-наследника, имплементирующие корректные алгоритмы работы с графом как с матрицей смежности и списками смежности.
